{"version":3,"sources":["../../../src/angular2-toaster/src/lib/bodyOutputType.ts","../../../src/angular2-toaster/src/lib/transitions.ts","../../../src/angular2-toaster/src/lib/toaster-config.ts","../../../src/angular2-toaster/src/lib/toaster.service.ts","../../../src/angular2-toaster/src/lib/toaster-container.component.ts","../../../src/angular2-toaster/src/lib/toast.component.ts","../../../src/angular2-toaster/src/lib/trust-html.pipe.ts","../../../src/angular2-toaster/src/lib/toaster.module.ts"],"names":["BodyOutputType","Transitions","trigger","state","style","opacity","transform","transition","height","animate","group","background-position","background-image","DefaultTypeClasses","error","info","wait","success","warning","DefaultIconClasses","configOverrides","this","limit","tapToDismiss","showCloseButton","closeHtml","newestOnTop","timeout","typeClasses","iconClasses","bodyOutputType","Default","bodyTemplate","defaultToastType","positionClass","titleClass","messageClass","animation","preventDuplicates","mouseoverTimerStop","toastContainerId","Injectable","Guid","newGuid","replace","c","r","Math","random","toString","ToasterService","_this","addToast","Observable","observer","_addToast","pipe","share","clearToasts","_clearToasts","_removeToastSubject","Subject","removeToast","prototype","pop","type","title","body","toast","toastId","Error","next","popAsync","setTimeout","clear","clearWrapper","args","providedIn","ToasterContainerComponent","toasterService","toasts","ngOnInit","registerSubscribers","isNullOrUndefined","toasterconfig","ToasterConfig","click","isCloseButton","onClickCallback","childClick","$event","value","index","indexOf","toastIdOrDefault","splice","onHideCallback","addToastSubscriber","subscribe","clearToastsSubscriber","length","some","t","unshift","isLimitExceeded","push","shift","onShowCallback","removeAllToasts","i","clearToastsAction","filter","ngOnDestroy","unsubscribe","Component","selector","template","animations","Input","ToastComponent","componentFactoryResolver","changeDetectorRef","ngZone","element","renderer2","progressBarWidth","clickEvent","EventEmitter","removeToastEvent","timeoutId","progressBarIntervalId","progressBar","progressBarDirection","ngAfterViewInit","component","resolveComponentFactory","componentBody","createComponent","undefined","injector","instance","detectChanges","removeMouseOverListener","listen","nativeElement","stopTimer","configureTimer","event","stopPropagation","emit","clearTimers","restartTimer","removeToastTick","Date","getTime","runOutsideAngular","window","run","markForCheck","setInterval","updateProgressBar","clearTimeout","clearInterval","ComponentFactoryResolver","ChangeDetectorRef","NgZone","ElementRef","Renderer2","ViewChild","read","ViewContainerRef","static","Output","HostListener","TrustHtmlPipe","sanitizer","content","bypassSecurityTrustHtml","Pipe","name","pure","DomSanitizer","ToasterModule","forRoot","ngModule","providers","forChild","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["export enum BodyOutputType {\r\n    Default, TrustedHtml, Component\r\n}\r\n","import { \r\n    trigger, state, style, animate, transition, group \r\n} from '@angular/animations';\r\n\r\nexport const Transitions = [\r\n    trigger('toastState', [\r\n        state('flyRight, flyLeft, slideDown, slideDown, slideUp, slideUp, fade', \r\n            style({ opacity: 1, transform: 'translate(0,0)' })),\r\n        transition('void => flyRight', [\r\n            style({\r\n                opacity: 0,\r\n                transform: 'translateX(100%)',\r\n                height: 0\r\n            }),\r\n            animate('0.15s ease-in', style({\r\n                opacity: 1,\r\n                height: '*'\r\n            })),\r\n            animate('0.25s 15ms ease-in')\r\n        ]),\r\n        transition('flyRight => void', [\r\n            animate('0.25s ease-out', style({\r\n                opacity: 0,\r\n                transform: 'translateX(100%)'\r\n            })),\r\n            animate('0.15s ease-out', style({\r\n                height: 0\r\n            }))\r\n        ]),\r\n        transition('void => flyLeft', [\r\n            style({\r\n                opacity: 0, \r\n                transform: 'translateX(-100%)',\r\n                height: 0\r\n            }),\r\n            animate('0.15s ease-in', style({\r\n                opacity: 1,\r\n                height: '*'\r\n            })),\r\n            animate('0.25s 15ms ease-in')\r\n        ]),\r\n        transition('flyLeft => void', [\r\n            animate('0.25s 10ms ease-out', style({\r\n                opacity: 0, \r\n                transform: 'translateX(-100%)'\r\n            })),\r\n            animate('0.15s ease-out', style({\r\n                height: 0\r\n            }))\r\n        ]),\r\n        transition('void => slideDown', [\r\n            style({\r\n                opacity: 0, \r\n                transform: 'translateY(-500%)',\r\n                height: 0\r\n            }),\r\n            group([\r\n                animate('0.2s ease-in', style({\r\n                    height: '*'\r\n                })),\r\n                animate('0.4s ease-in', style({\r\n                    transform: 'translate(0,0)'\r\n                })), \r\n                animate('0.3s 0.1s ease-in', style({\r\n                    opacity: 1\r\n                }))\r\n            ])\r\n        ]),\r\n        transition('slideDown => void', group([\r\n            animate('0.3s ease-out', style({\r\n                opacity: 0\r\n            })),\r\n            animate('0.4s ease-out', style({\r\n                transform: 'translateY(-500%)'\r\n            })), \r\n            animate('0.2s 0.2s ease-out', style({\r\n                height: 0\r\n            }))\r\n        ])),\r\n        transition('void => slideUp', [\r\n            style({\r\n                opacity: 0, \r\n                transform: 'translateY(1000%)',\r\n                height: 0\r\n            }),\r\n            group([\r\n                animate('0.2s ease-in', style({\r\n                    height: '*'\r\n                })),\r\n                animate('0.5s ease-in', style({\r\n                    transform: 'translate(0,0)'\r\n                })), \r\n                animate('0.3s 0.1s ease-in', style({\r\n                    opacity: 1\r\n                }))\r\n            ])\r\n        ]),\r\n        transition('slideUp => void', group([\r\n            animate('0.3s ease-out', style({\r\n                opacity: 0\r\n            })),\r\n            animate('0.5s ease-out', style({\r\n                transform: 'translateY(1000%)'\r\n            })), \r\n            animate('0.3s 0.15s ease-out', style({\r\n                height: 0\r\n            }))\r\n        ])),\r\n        transition('void => fade', [\r\n            style({\r\n                opacity: 0,\r\n                height: 0\r\n            }),\r\n            animate('0.20s ease-in', style({\r\n                height: '*'\r\n            })),\r\n            animate('0.15s ease-in', style({\r\n                opacity: 1\r\n            }))\r\n            \r\n        ]),\r\n        transition('fade => void', [\r\n            group([\r\n                animate('0.0s ease-out', style({\r\n                    // reposition the background to prevent\r\n                    // a ghost image during transition\r\n                    'background-position': '-99999px'\r\n                })),\r\n                animate('0.15s ease-out', style({\r\n                    opacity: 0,\r\n                    'background-image': ''\r\n                })),\r\n                animate('0.3s 20ms ease-out', style({\r\n                    height: 0\r\n                }))\r\n            ])\r\n        ])\r\n    ]),\r\n]","import { Injectable } from '@angular/core';\r\nimport { BodyOutputType } from './bodyOutputType';\r\nimport { ToastType } from './toast';\r\n\r\nexport const DefaultTypeClasses : { [key in ToastType]? : string } = {\r\n    error: 'toast-error',\r\n    info: 'toast-info',\r\n    wait: 'toast-wait',\r\n    success: 'toast-success',\r\n    warning: 'toast-warning'\r\n};\r\n\r\nexport const DefaultIconClasses : { [key in ToastType]? : string } = {\r\n    error: 'icon-error',\r\n    info: 'icon-info',\r\n    wait: 'icon-wait',\r\n    success: 'icon-success',\r\n    warning: 'icon-warning'\r\n};\r\n\r\nexport interface IToasterConfig {\r\n    limit?: number|null;\r\n    tapToDismiss?: boolean;\r\n    showCloseButton?: boolean|{ [key in ToastType]?: boolean};\r\n    closeHtml?: string;\r\n    newestOnTop?: boolean;\r\n    timeout?: number|{ [key in ToastType]?: number };\r\n    typeClasses?: { [key in ToastType]?: string };\r\n    iconClasses?: { [key in ToastType]?: string };\r\n    bodyOutputType?: BodyOutputType;\r\n    bodyTemplate?: string;\r\n    defaultToastType?: ToastType;\r\n    // Options (see CSS):\r\n    // 'toast-top-full-width', 'toast-bottom-full-width', 'toast-center',\r\n    // 'toast-top-left', 'toast-top-center', 'toast-top-right',\r\n    // 'toast-bottom-left', 'toast-bottom-center', 'toast-bottom-right',\r\n    positionClass?: string;\r\n    titleClass?: string;\r\n    messageClass?: string;\r\n    animation?: string;\r\n    preventDuplicates?: boolean;\r\n    mouseoverTimerStop?: boolean;\r\n    toastContainerId?: number|null;\r\n}\r\n\r\n@Injectable()\r\nexport class ToasterConfig implements IToasterConfig {\r\n    limit?: number|null;\r\n    tapToDismiss: boolean;\r\n    showCloseButton: boolean|{ [key in ToastType]?: boolean };\r\n    closeHtml: string;\r\n    newestOnTop: boolean;\r\n    timeout: number|{ [key in ToastType]?: number };\r\n    typeClasses: { [key in ToastType]?: string };\r\n    iconClasses: { [key in ToastType]?: string };\r\n    bodyOutputType: BodyOutputType;\r\n    bodyTemplate: string;\r\n    defaultToastType: ToastType;\r\n    // Options (see CSS):\r\n    // 'toast-top-full-width', 'toast-bottom-full-width', 'toast-center',\r\n    // 'toast-top-left', 'toast-top-center', 'toast-top-right',\r\n    // 'toast-bottom-left', 'toast-bottom-center', 'toast-bottom-right',\r\n    positionClass: string;\r\n    titleClass: string;\r\n    messageClass: string;\r\n    animation: string;\r\n    preventDuplicates: boolean;\r\n    mouseoverTimerStop: boolean;\r\n    toastContainerId?: number|null;\r\n\r\n    constructor(configOverrides?: IToasterConfig) {\r\n        configOverrides = configOverrides || {};\r\n        this.limit = configOverrides.limit || null;\r\n        this.tapToDismiss = configOverrides.tapToDismiss != null ? configOverrides.tapToDismiss : true;\r\n        this.showCloseButton = configOverrides.showCloseButton != null ? configOverrides.showCloseButton : false;\r\n        this.closeHtml = configOverrides.closeHtml || '<span>&times;</span>';\r\n        this.newestOnTop = configOverrides.newestOnTop != null ? configOverrides.newestOnTop : true;\r\n        this.timeout = configOverrides.timeout != null ? configOverrides.timeout : 5000;\r\n        this.typeClasses = configOverrides.typeClasses || DefaultTypeClasses;\r\n        this.iconClasses = configOverrides.iconClasses || DefaultIconClasses;\r\n        this.bodyOutputType = configOverrides.bodyOutputType || BodyOutputType.Default;\r\n        this.bodyTemplate = configOverrides.bodyTemplate || 'toasterBodyTmpl.html';\r\n        this.defaultToastType = configOverrides.defaultToastType || 'info';\r\n        this.positionClass = configOverrides.positionClass || 'toast-top-right';\r\n        this.titleClass = configOverrides.titleClass || 'toast-title';\r\n        this.messageClass = configOverrides.messageClass || 'toast-message';\r\n        this.animation = configOverrides.animation || '';\r\n        this.preventDuplicates = configOverrides.preventDuplicates != null ? configOverrides.preventDuplicates : false;\r\n        this.mouseoverTimerStop = configOverrides.mouseoverTimerStop != null ? configOverrides.mouseoverTimerStop : false;\r\n        this.toastContainerId = configOverrides.toastContainerId != null ? configOverrides.toastContainerId : null;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Toast, ToastType } from './toast';\r\nimport { IClearWrapper } from './clearWrapper';\r\nimport { Observable, Subject, Observer } from 'rxjs';\r\nimport { share } from 'rxjs/operators'\r\n\r\n// http://stackoverflow.com/questions/26501688/a-typescript-guid-class\r\nclass Guid {\r\n    static newGuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            const r = Math.random() * 16 | 0, v = c === 'x' ? r : ( r & 0x3 | 0x8 );\r\n            return v.toString(16);\r\n        });\r\n    }\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ToasterService {\r\n    addToast: Observable<Toast>;\r\n    private _addToast: Observer<Toast>;\r\n\r\n    clearToasts: Observable<IClearWrapper>;\r\n    private _clearToasts: Observer<IClearWrapper>;\r\n\r\n    removeToast: Observable<IClearWrapper>;\r\n    /** @internal */\r\n    _removeToastSubject: Subject<IClearWrapper>;\r\n\r\n    /**\r\n     * Creates an instance of ToasterService.\r\n     */\r\n    constructor() {\r\n        this.addToast = new Observable<Toast>((observer: any) => this._addToast = observer).pipe(share());\r\n        this.clearToasts = new Observable<IClearWrapper>((observer: any) => this._clearToasts = observer).pipe(share());\r\n        this._removeToastSubject = new Subject<IClearWrapper>()\r\n        this.removeToast = this._removeToastSubject.pipe(share());\r\n    }\r\n\r\n    /**\r\n     * Synchronously create and show a new toast instance.\r\n     *\r\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\r\n     * @param {string=} title The toast title.\r\n     * @param {string=} body The toast body.\r\n     * @returns {Toast}\r\n     *          The newly created Toast instance with a randomly generated GUID Id.\r\n     */\r\n    pop(type: ToastType | Toast, title?: string, body?: string): Toast {\r\n        const toast = typeof type === 'string' ? { type: type, title: title, body: body } : type;\r\n\r\n        if (!toast.toastId) {\r\n            toast.toastId = Guid.newGuid();\r\n        }\r\n\r\n        if (!this._addToast) {\r\n            throw new Error('No Toaster Containers have been initialized to receive toasts.');\r\n        }\r\n\r\n        this._addToast.next(toast);\r\n        return toast;\r\n    }\r\n\r\n    /**\r\n     * Asynchronously create and show a new toast instance.\r\n     *\r\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\r\n     * @param {string=} title The toast title.\r\n     * @param {string=} body The toast body.\r\n     * @returns {Observable<Toast>}\r\n     *          A hot Observable that can be subscribed to in order to receive the Toast instance\r\n     *          with a randomly generated GUID Id.\r\n     */\r\n    popAsync(type: ToastType | Toast, title?: string, body?: string): Observable<Toast> {\r\n        setTimeout(() => {\r\n            this.pop(type, title, body);\r\n        }, 0);\r\n\r\n        return this.addToast;\r\n    }\r\n\r\n    /**\r\n     * Clears a toast by toastId and/or toastContainerId.\r\n     *\r\n     * @param {string} toastId The toastId to clear.\r\n     * @param {number=} toastContainerId\r\n     *        The toastContainerId of the container to remove toasts from.\r\n     */\r\n    clear(toastId?: string, toastContainerId?: number) {\r\n        const clearWrapper: IClearWrapper = {\r\n            toastId: toastId, toastContainerId: toastContainerId\r\n        };\r\n\r\n        this._clearToasts.next(clearWrapper)\r\n    }\r\n}\r\n","import { \r\n    Component,\r\n    Input, \r\n    OnInit,\r\n    OnDestroy \r\n} from '@angular/core';\r\nimport { Transitions } from './transitions';\r\nimport { ToasterConfig } from './toaster-config';\r\nimport { ToasterService} from './toaster.service';\r\nimport { IClearWrapper } from './clearWrapper';\r\nimport { Toast } from './toast';\r\n\r\n@Component({\r\n    selector: 'toaster-container',\r\n    template: `\r\n        <div class=\"toast-container\" [ngClass]=\"[toasterconfig.positionClass]\">\r\n            <div toastComp *ngFor=\"let toast of toasts\" class=\"toast\" [toast]=\"toast\"\r\n                [toasterconfig]=\"toasterconfig\"\r\n                [@toastState]=\"toasterconfig.animation\"\r\n                [titleClass]=\"toasterconfig.titleClass\"\r\n                [messageClass]=\"toasterconfig.messageClass\"\r\n                [ngClass]=\"[\r\n                    toasterconfig.iconClasses[toast.type],\r\n                    toasterconfig.typeClasses[toast.type]\r\n                ]\"\r\n                (click)=\"click(toast)\" (clickEvent)=\"childClick($event)\"\r\n                (removeToastEvent)=\"removeToast($event)\"\r\n            >\r\n            </div>\r\n        </div>\r\n        `,\r\n    animations: Transitions\r\n})\r\nexport class ToasterContainerComponent implements OnInit, OnDestroy {\r\n    private addToastSubscriber: any;\r\n    private clearToastsSubscriber: any;\r\n    private toasterService: ToasterService;\r\n\r\n    @Input() toasterconfig: ToasterConfig;\r\n\r\n    public toasts: Toast[] = [];\r\n\r\n    constructor(toasterService: ToasterService) {\r\n        this.toasterService = toasterService;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.registerSubscribers();\r\n        if (this.isNullOrUndefined(this.toasterconfig)) {\r\n            this.toasterconfig = new ToasterConfig();\r\n        }\r\n    }\r\n\r\n    // event handlers\r\n    click(toast: Toast, isCloseButton?: boolean) {\r\n        if (toast.onClickCallback) {\r\n            toast.onClickCallback(toast);\r\n        }\r\n\r\n        const tapToDismiss = !this.isNullOrUndefined(toast.tapToDismiss) \r\n            ? toast.tapToDismiss\r\n            : this.toasterconfig.tapToDismiss;\r\n\r\n        if (tapToDismiss || (toast.showCloseButton && isCloseButton)) {\r\n            this.removeToast(toast);\r\n        }\r\n    }\r\n\r\n    childClick($event: any) {\r\n        this.click($event.value.toast, $event.value.isCloseButton);\r\n    }\r\n\r\n    removeToast(toast: Toast) {\r\n        const index = this.toasts.indexOf(toast);\r\n        if (index < 0) { return };\r\n\r\n        const toastId = this.toastIdOrDefault(toast);\r\n\r\n        this.toasts.splice(index, 1);\r\n\r\n        if (toast.onHideCallback) { toast.onHideCallback(toast); }\r\n        this.toasterService._removeToastSubject.next({ toastId: toastId, toastContainerId: toast.toastContainerId });\r\n    }\r\n\r\n    // private functions\r\n    private registerSubscribers() {\r\n        this.addToastSubscriber = this.toasterService.addToast.subscribe((toast: Toast) => {\r\n            this.addToast(toast);\r\n        });\r\n\r\n        this.clearToastsSubscriber = this.toasterService.clearToasts.subscribe((clearWrapper: IClearWrapper) => {\r\n            this.clearToasts(clearWrapper);\r\n        });\r\n    }\r\n\r\n    private addToast(toast: Toast) {\r\n        if (toast.toastContainerId && this.toasterconfig.toastContainerId\r\n            && toast.toastContainerId !== this.toasterconfig.toastContainerId) { return };\r\n\r\n        if (!toast.type \r\n            || !this.toasterconfig.typeClasses[toast.type]\r\n            || !this.toasterconfig.iconClasses[toast.type]) {\r\n            toast.type = this.toasterconfig.defaultToastType;\r\n        }\r\n\r\n        if (this.toasterconfig.preventDuplicates && this.toasts.length > 0) {\r\n            if (toast.toastId && this.toasts.some(t => t.toastId === toast.toastId)) {\r\n                return;\r\n            } else if (this.toasts.some(t => t.body === toast.body)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.isNullOrUndefined(toast.showCloseButton)) {\r\n            if (typeof this.toasterconfig.showCloseButton === 'object') {\r\n                toast.showCloseButton = this.toasterconfig.showCloseButton[toast.type];\r\n            } else if (typeof this.toasterconfig.showCloseButton === 'boolean') {\r\n                toast.showCloseButton = <boolean>this.toasterconfig.showCloseButton;\r\n            }\r\n        }\r\n\r\n        if (toast.showCloseButton) {\r\n            toast.closeHtml = toast.closeHtml || this.toasterconfig.closeHtml;\r\n        }\r\n\r\n        toast.bodyOutputType = toast.bodyOutputType || this.toasterconfig.bodyOutputType;\r\n\r\n        if (this.toasterconfig.newestOnTop) {\r\n            this.toasts.unshift(toast);\r\n            if (this.isLimitExceeded()) {\r\n                this.toasts.pop();\r\n            }\r\n        } else {\r\n            this.toasts.push(toast);\r\n            if (this.isLimitExceeded()) {\r\n                this.toasts.shift();\r\n            }\r\n        }\r\n\r\n        if (toast.onShowCallback) {\r\n            toast.onShowCallback(toast);\r\n        }\r\n    }\r\n\r\n    private isLimitExceeded() {\r\n        return this.toasterconfig.limit && this.toasts.length > this.toasterconfig.limit;\r\n    }\r\n\r\n    private removeAllToasts() {\r\n        for (let i = this.toasts.length - 1; i >= 0; i--) {\r\n            this.removeToast(this.toasts[i]);\r\n        }\r\n    }\r\n\r\n    private clearToasts(clearWrapper: IClearWrapper) {\r\n        const toastId = clearWrapper.toastId ;\r\n        const toastContainerId = clearWrapper.toastContainerId;\r\n\r\n        if (this.isNullOrUndefined(toastContainerId) || (toastContainerId === this.toasterconfig.toastContainerId)) {\r\n            this.clearToastsAction(toastId);\r\n        }\r\n    }\r\n\r\n    private clearToastsAction(toastId?: string) {\r\n        if (toastId) {\r\n            this.removeToast(this.toasts.filter(t => t.toastId === toastId)[0]);\r\n        } else {\r\n            this.removeAllToasts();\r\n        }\r\n    }\r\n\r\n    private toastIdOrDefault(toast: Toast) {\r\n        return toast.toastId || '';\r\n    }\r\n\r\n    private isNullOrUndefined(value: any): boolean {\r\n        return value === null || typeof value === 'undefined';\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.addToastSubscriber) { this.addToastSubscriber.unsubscribe(); }\r\n        if (this.clearToastsSubscriber) { this.clearToastsSubscriber.unsubscribe(); }\r\n    }\r\n}\r\n","import {\r\n    Component, \r\n    Input, \r\n    Output, \r\n    ViewChild, \r\n    ViewContainerRef, \r\n    EventEmitter,\r\n    ComponentFactoryResolver, \r\n    ChangeDetectorRef, \r\n    OnInit, \r\n    AfterViewInit, \r\n    OnDestroy,\r\n    HostListener,\r\n    NgZone, \r\n    ElementRef,\r\n    Renderer2\r\n} from '@angular/core';\r\nimport { Toast } from './toast';\r\nimport { BodyOutputType } from './bodyOutputType';\r\nimport { ToasterConfig } from './toaster-config';\r\n\r\n@Component({\r\n    selector: '[toastComp]',\r\n    template: `\r\n        <div class=\"toast-content\">\r\n            <div [ngClass]=\"titleClass\">{{toast.title}}</div>\r\n            <div [ngClass]=\"messageClass\" [ngSwitch]=\"toast.bodyOutputType\">\r\n                <div *ngSwitchCase=\"bodyOutputType.Component\" #componentBody></div>\r\n                <div *ngSwitchCase=\"bodyOutputType.TrustedHtml\" [innerHTML]=\"toast.body | trustHtml\"></div>\r\n                <div *ngSwitchCase=\"bodyOutputType.Default\">{{toast.body}}</div>\r\n            </div>\r\n        </div>\r\n        <button class=\"toast-close-button\" *ngIf=\"toast.showCloseButton\" (click)=\"click($event, toast)\"\r\n            [innerHTML]=\"toast.closeHtml | trustHtml\">\r\n        </button>\r\n        <div *ngIf=\"toast.progressBar\">\r\n            <div class=\"toast-progress-bar\" [style.width]=\"progressBarWidth + '%'\"></div>\r\n        </div>`\r\n})\r\nexport class ToastComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    @Input() toasterconfig: ToasterConfig;\r\n    @Input() toast: Toast;\r\n    @Input() titleClass: string;\r\n    @Input() messageClass: string;\r\n    @ViewChild('componentBody', { read: ViewContainerRef, static: false }) componentBody: ViewContainerRef;\r\n\r\n    public progressBarWidth: number = -1;\r\n    public bodyOutputType = BodyOutputType;\r\n\r\n    @Output()\r\n    public clickEvent = new EventEmitter();\r\n    @Output()\r\n    public removeToastEvent = new EventEmitter<Toast>();\r\n\r\n    private timeoutId?: number = null;\r\n    private timeout: number = 0;\r\n    private progressBarIntervalId?: number = null;\r\n    private removeToastTick: number;\r\n\r\n    private removeMouseOverListener: () => void;\r\n\r\n    constructor(\r\n      private componentFactoryResolver: ComponentFactoryResolver,\r\n      private changeDetectorRef: ChangeDetectorRef,\r\n      private ngZone: NgZone,\r\n      private element: ElementRef,\r\n      private renderer2: Renderer2\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this.toast.progressBar) {\r\n            this.toast.progressBarDirection = this.toast.progressBarDirection || 'decreasing';\r\n        }\r\n\r\n        let timeout = (typeof this.toast.timeout === 'number')\r\n            ? this.toast.timeout : this.toasterconfig.timeout;\r\n\r\n        if (typeof timeout === 'object') { \r\n            timeout = timeout[this.toast.type]; \r\n        };\r\n\r\n        this.timeout = timeout;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.toast.bodyOutputType === this.bodyOutputType.Component) {\r\n            const component = this.componentFactoryResolver.resolveComponentFactory(this.toast.body);\r\n            const componentInstance: any = this.componentBody.createComponent(component, undefined, this.componentBody.injector);\r\n            componentInstance.instance.toast = this.toast;\r\n            this.changeDetectorRef.detectChanges();\r\n        }\r\n\r\n        if (this.toasterconfig.mouseoverTimerStop) {\r\n            // only apply a mouseenter event when necessary to avoid\r\n            // unnecessary event and change detection cycles.\r\n            this.removeMouseOverListener = this.renderer2.listen(\r\n                this.element.nativeElement, \r\n                'mouseenter', \r\n                () => this.stopTimer()\r\n            );\r\n        }\r\n\r\n        this.configureTimer();\r\n    }\r\n\r\n    click(event: MouseEvent, toast: Toast) {\r\n        event.stopPropagation();\r\n        this.clickEvent.emit({ value : { toast: toast, isCloseButton: true } });\r\n    }\r\n\r\n    stopTimer() {\r\n        this.progressBarWidth = 0;\r\n        this.clearTimers();\r\n    }\r\n\r\n    @HostListener('mouseleave') \r\n    restartTimer() {\r\n        if (this.toasterconfig.mouseoverTimerStop) {\r\n            if (!this.timeoutId) {\r\n                this.configureTimer();\r\n            }\r\n        } else if (this.timeout && !this.timeoutId) {\r\n            this.removeToast();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.removeMouseOverListener) {\r\n            this.removeMouseOverListener();\r\n        }\r\n        this.clearTimers();\r\n    }\r\n\r\n    private configureTimer() {\r\n        if (!this.timeout || this.timeout < 1) {\r\n            return;\r\n        }\r\n\r\n        if (this.toast.progressBar) {\r\n            this.removeToastTick = new Date().getTime() + this.timeout;\r\n            this.progressBarWidth = -1;\r\n        } \r\n        \r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.timeoutId = window.setTimeout(() => {\r\n                this.ngZone.run(() => {\r\n                    this.changeDetectorRef.markForCheck();\r\n                    this.removeToast();\r\n                });\r\n            }, this.timeout);\r\n\r\n            if (this.toast.progressBar) {\r\n                this.progressBarIntervalId = window.setInterval(() => {\r\n                    this.ngZone.run(() => {\r\n                        this.updateProgressBar();\r\n                    });\r\n                }, 10);\r\n            }\r\n        });\r\n    }\r\n\r\n    private updateProgressBar() {\r\n        if (this.progressBarWidth === 0 || this.progressBarWidth === 100) {\r\n          return;\r\n        }\r\n\r\n        this.progressBarWidth = ((this.removeToastTick - new Date().getTime()) / this.timeout) * 100;\r\n        \r\n        if (this.toast.progressBarDirection === 'increasing') {\r\n          this.progressBarWidth = 100 - this.progressBarWidth;\r\n        }\r\n        if (this.progressBarWidth < 0) {\r\n          this.progressBarWidth = 0;\r\n        }\r\n        if (this.progressBarWidth > 100) {\r\n          this.progressBarWidth = 100;\r\n        }\r\n    }\r\n\r\n    private clearTimers() {\r\n        if (this.timeoutId) {\r\n            window.clearTimeout(this.timeoutId)\r\n        }\r\n\r\n        if (this.progressBarIntervalId) {\r\n            window.clearInterval(this.progressBarIntervalId);\r\n        }\r\n\r\n        this.timeoutId = null;\r\n        this.progressBarIntervalId = null;\r\n    }\r\n\r\n    private removeToast() {\r\n        this.removeToastEvent.emit(this.toast);\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'trustHtml',\r\n    pure: true\r\n})\r\nexport class TrustHtmlPipe implements PipeTransform {\r\n    constructor(private sanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(content: any): SafeHtml {\r\n        return this.sanitizer.bypassSecurityTrustHtml(content);\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToastComponent } from './toast.component';\r\nimport { ToasterContainerComponent } from './toaster-container.component';\r\nimport { ToasterService } from './toaster.service';\r\nimport { TrustHtmlPipe } from './trust-html.pipe';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [\r\n        ToastComponent,\r\n        ToasterContainerComponent,\r\n        TrustHtmlPipe\r\n    ],\r\n    exports: [\r\n        ToasterContainerComponent,\r\n        ToastComponent\r\n    ]\r\n})\r\nexport class ToasterModule {\r\n    static forRoot(): ModuleWithProviders<ToasterModule> {\r\n        return {\r\n            ngModule: ToasterModule,\r\n            providers: [ToasterService, ToasterContainerComponent]\r\n        }\r\n    }\r\n\r\n    static forChild(): ModuleWithProviders<ToasterModule> {\r\n        return {\r\n            ngModule: ToasterModule,\r\n            providers: [ToasterContainerComponent]\r\n        }\r\n    }\r\n }\r\n"]}